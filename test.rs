use ::libc;
extern "C" {
    pub type _qcms_transform;
    pub type _qcms_profile;
    #[no_mangle]
    fn abort() -> !;
    #[no_mangle]
    fn printf(_: *const libc::c_char, _: ...) -> libc::c_int;
    #[no_mangle]
    fn qcms_transform_release(_: *mut qcms_transform);
    #[no_mangle]
    fn qcms_profile_from_path(path: *const libc::c_char) -> *mut qcms_profile;
    #[no_mangle]
    fn qcms_profile_release(profile: *mut qcms_profile);
    #[no_mangle]
    fn qcms_transform_create(in_0: *mut qcms_profile, in_type: qcms_data_type,
                             out: *mut qcms_profile, out_type: qcms_data_type,
                             intent: qcms_intent) -> *mut qcms_transform;
    #[no_mangle]
    fn qcms_transform_data(transform: *mut qcms_transform,
                           src: *const libc::c_void, dest: *mut libc::c_void,
                           length: size_t);
    #[no_mangle]
    fn memcpy(_: *mut libc::c_void, _: *const libc::c_void, _: libc::c_ulong)
     -> *mut libc::c_void;
    #[no_mangle]
    fn memset(_: *mut libc::c_void, _: libc::c_int, _: libc::c_ulong)
     -> *mut libc::c_void;
}
pub type __darwin_size_t = libc::c_ulong;
pub type size_t = __darwin_size_t;
pub type uint8_t = libc::c_uchar;
pub type uint32_t = libc::c_uint;
pub type qcms_transform = _qcms_transform;
pub type qcms_profile = _qcms_profile;
pub type qcms_intent = libc::c_uint;
pub const QCMS_INTENT_DEFAULT: qcms_intent = 0;
pub const QCMS_INTENT_MAX: qcms_intent = 3;
pub const QCMS_INTENT_ABSOLUTE_COLORIMETRIC: qcms_intent = 3;
pub const QCMS_INTENT_SATURATION: qcms_intent = 2;
pub const QCMS_INTENT_RELATIVE_COLORIMETRIC: qcms_intent = 1;
pub const QCMS_INTENT_PERCEPTUAL: qcms_intent = 0;
pub const QCMS_INTENT_MIN: qcms_intent = 0;
pub type qcms_data_type = libc::c_uint;
pub const QCMS_DATA_GRAYA_8: qcms_data_type = 4;
pub const QCMS_DATA_GRAY_8: qcms_data_type = 3;
pub const QCMS_DATA_BGRA_8: qcms_data_type = 2;
pub const QCMS_DATA_RGBA_8: qcms_data_type = 1;
pub const QCMS_DATA_RGB_8: qcms_data_type = 0;
/*
SHA-1 in C
By Steve Reid <sreid@sea-to-sky.net>
100% Public Domain

-----------------
Modified 7/98 
By James H. Brown <jbrown@burgoyne.com>
Still 100% Public Domain

Corrected a problem which generated improper hash values on 16 bit machines
Routine SHA1Update changed from
	void SHA1Update(SHA1_CTX* context, unsigned char* data, unsigned int
len)
to
	void SHA1Update(SHA1_CTX* context, unsigned char* data, unsigned
long len)

The 'len' parameter was declared an int which works fine on 32 bit machines.
However, on 16 bit machines an int is too small for the shifts being done
against
it.  This caused the hash function to generate incorrect values if len was
greater than 8191 (8K - 1) due to the 'len << 3' on line 3 of SHA1Update().

Since the file IO in main() reads 16K at a time, any file 8K or larger would
be guaranteed to generate the wrong hash (e.g. Test Vector #3, a million
"a"s).

I also changed the declaration of variables i & j in SHA1Update to 
unsigned long from unsigned int for the same reason.

These changes should make no difference to any 32 bit implementations since
an
int and a long are the same size in those environments.

--
I also corrected a few compiler warnings generated by Borland C.
1. Added #include <process.h> for exit() prototype
2. Removed unused variable 'j' in SHA1Final
3. Changed exit(0) to return(0) at end of main.

ALL changes I made can be located by searching for comments containing 'JHB'
-----------------
Modified 8/98
By Steve Reid <sreid@sea-to-sky.net>
Still 100% public domain

1- Removed #include <process.h> and used return() instead of exit()
2- Fixed overwriting of finalcount in SHA1Final() (discovered by Chris Hall)
3- Changed email address from steve@edmweb.com to sreid@sea-to-sky.net

-----------------
Modified 4/01
By Saul Kravitz <Saul.Kravitz@celera.com>
Still 100% PD
Modified to run on Compaq Alpha hardware.  

-----------------
Modified 07/2002
By Ralph Giles <giles@artofcode.com>
Still 100% public domain
modified for use with stdint types, autoconf
code cleanup, removed attribution comments
switched SHA1Final() argument order for consistency
use SHA1_ prefix for public api
move public api to sha1.h
*/
/*
Test Vectors (from FIPS PUB 180-1)
"abc"
  A9993E36 4706816A BA3E2571 7850C26C 9CD0D89D
"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"
  84983E44 1C3BD26E BAAE4AA1 F95129E5 E54670F1
A million repetitions of "a"
  34AA973C D4C4DAA4 F61EEB2B DBAD2731 6534016F
*/
/* public api for steve reid's public domain SHA-1 implementation */
/* this file is in the public domain */
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SHA1_CTX {
    pub state: [uint32_t; 5],
    pub count: [uint32_t; 2],
    pub buffer: [uint8_t; 64],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union CHAR64LONG16 {
    pub c: [uint8_t; 64],
    pub l: [uint32_t; 16],
}
/* __SHA1_H */
//#include "os_types.h"
//#include "sha1.h"
/* blk0() and blk() perform the initial expand. */
/* I got the idea of expanding during the round function from SSLeay */
/* FIXME: can we do this in an endian-proof way? */
/* (R0+R1), R2, R3, R4 are the different operations used in SHA1 */
/* SAK */
/* VERBOSE */
/* Hash a single 512-bit block. This is the core of the algorithm. */
/* Copy context->state[] to working vars */
/* 4 rounds of 20 operations each. Loop unrolled. */
/* Add the working vars back into context.state[] */
/* Wipe variables */
/* SHA1Init - Initialize new context */
unsafe extern "C" fn SHA1_Init(mut context: *mut SHA1_CTX) {
    /* SHA1 initialization constants */
    (*context).state[0 as libc::c_int as usize] =
        0x67452301 as libc::c_int as uint32_t;
    (*context).state[1 as libc::c_int as usize] = 0xefcdab89 as libc::c_uint;
    (*context).state[2 as libc::c_int as usize] = 0x98badcfe as libc::c_uint;
    (*context).state[3 as libc::c_int as usize] =
        0x10325476 as libc::c_int as uint32_t;
    (*context).state[4 as libc::c_int as usize] = 0xc3d2e1f0 as libc::c_uint;
    (*context).count[1 as libc::c_int as usize] =
        0 as libc::c_int as uint32_t;
    (*context).count[0 as libc::c_int as usize] =
        (*context).count[1 as libc::c_int as usize];
}
/* Run your data through this. */
unsafe extern "C" fn SHA1_Update(mut context: *mut SHA1_CTX,
                                 mut data: *const uint8_t, len: size_t) {
    let mut i: size_t = 0;
    let mut j: size_t = 0;
    j =
        ((*context).count[0 as libc::c_int as usize] >> 3 as libc::c_int &
             63 as libc::c_int as libc::c_uint) as size_t;
    (*context).count[0 as libc::c_int as usize] =
        ((*context).count[0 as libc::c_int as usize] as
             libc::c_ulong).wrapping_add(len << 3 as libc::c_int) as uint32_t
            as uint32_t;
    if ((*context).count[0 as libc::c_int as usize] as libc::c_ulong) <
           len << 3 as libc::c_int {
        (*context).count[1 as libc::c_int as usize] =
            (*context).count[1 as libc::c_int as usize].wrapping_add(1)
    }
    (*context).count[1 as libc::c_int as usize] =
        ((*context).count[1 as libc::c_int as usize] as
             libc::c_ulong).wrapping_add(len >> 29 as libc::c_int) as uint32_t
            as uint32_t;
    if j.wrapping_add(len) > 63 as libc::c_int as libc::c_ulong {
        i = (64 as libc::c_int as libc::c_ulong).wrapping_sub(j);
        memcpy(&mut *(*context).buffer.as_mut_ptr().offset(j as isize) as
                   *mut uint8_t as *mut libc::c_void,
               data as *const libc::c_void, i);
        SHA1_Transform((*context).state.as_mut_ptr(),
                       (*context).buffer.as_mut_ptr() as *const uint8_t);
        while i.wrapping_add(63 as libc::c_int as libc::c_ulong) < len {
            SHA1_Transform((*context).state.as_mut_ptr(),
                           data.offset(i as isize));
            i =
                (i as
                     libc::c_ulong).wrapping_add(64 as libc::c_int as
                                                     libc::c_ulong) as size_t
                    as size_t
        }
        j = 0 as libc::c_int as size_t
    } else { i = 0 as libc::c_int as size_t }
    memcpy(&mut *(*context).buffer.as_mut_ptr().offset(j as isize) as
               *mut uint8_t as *mut libc::c_void,
           &*data.offset(i as isize) as *const uint8_t as *const libc::c_void,
           len.wrapping_sub(i));
}
unsafe extern "C" fn SHA1_Transform(mut state: *mut uint32_t,
                                    mut buffer: *const uint8_t) {
    let mut a: uint32_t = 0;
    let mut b: uint32_t = 0;
    let mut c: uint32_t = 0;
    let mut d: uint32_t = 0;
    let mut e: uint32_t = 0;
    let mut block: *mut CHAR64LONG16 = 0 as *mut CHAR64LONG16;
    static mut workspace: [uint8_t; 64] = [0; 64];
    block = workspace.as_mut_ptr() as *mut CHAR64LONG16;
    memcpy(block as *mut libc::c_void, buffer as *const libc::c_void,
           64 as libc::c_int as libc::c_ulong);
    a = *state.offset(0 as libc::c_int as isize);
    b = *state.offset(1 as libc::c_int as isize);
    c = *state.offset(2 as libc::c_int as isize);
    d = *state.offset(3 as libc::c_int as isize);
    e = *state.offset(4 as libc::c_int as isize);
    (*block).l[0 as libc::c_int as usize] =
        ((*block).l[0 as libc::c_int as usize] << 24 as libc::c_int |
             (*block).l[0 as libc::c_int as usize] >>
                 32 as libc::c_int - 24 as libc::c_int) &
            0xff00ff00 as libc::c_uint |
            ((*block).l[0 as libc::c_int as usize] << 8 as libc::c_int |
                 (*block).l[0 as libc::c_int as usize] >>
                     32 as libc::c_int - 8 as libc::c_int) &
                0xff00ff as libc::c_int as libc::c_uint;
    e =
        (e as
             libc::c_uint).wrapping_add((b & (c ^ d) ^
                                             d).wrapping_add((*block).l[0 as
                                                                            libc::c_int
                                                                            as
                                                                            usize]).wrapping_add(0x5a827999
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(a
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    a
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    b = b << 30 as libc::c_int | b >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[1 as libc::c_int as usize] =
        ((*block).l[1 as libc::c_int as usize] << 24 as libc::c_int |
             (*block).l[1 as libc::c_int as usize] >>
                 32 as libc::c_int - 24 as libc::c_int) &
            0xff00ff00 as libc::c_uint |
            ((*block).l[1 as libc::c_int as usize] << 8 as libc::c_int |
                 (*block).l[1 as libc::c_int as usize] >>
                     32 as libc::c_int - 8 as libc::c_int) &
                0xff00ff as libc::c_int as libc::c_uint;
    d =
        (d as
             libc::c_uint).wrapping_add((a & (b ^ c) ^
                                             c).wrapping_add((*block).l[1 as
                                                                            libc::c_int
                                                                            as
                                                                            usize]).wrapping_add(0x5a827999
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(e
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    e
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    a = a << 30 as libc::c_int | a >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[2 as libc::c_int as usize] =
        ((*block).l[2 as libc::c_int as usize] << 24 as libc::c_int |
             (*block).l[2 as libc::c_int as usize] >>
                 32 as libc::c_int - 24 as libc::c_int) &
            0xff00ff00 as libc::c_uint |
            ((*block).l[2 as libc::c_int as usize] << 8 as libc::c_int |
                 (*block).l[2 as libc::c_int as usize] >>
                     32 as libc::c_int - 8 as libc::c_int) &
                0xff00ff as libc::c_int as libc::c_uint;
    c =
        (c as
             libc::c_uint).wrapping_add((e & (a ^ b) ^
                                             b).wrapping_add((*block).l[2 as
                                                                            libc::c_int
                                                                            as
                                                                            usize]).wrapping_add(0x5a827999
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(d
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    d
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    e = e << 30 as libc::c_int | e >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[3 as libc::c_int as usize] =
        ((*block).l[3 as libc::c_int as usize] << 24 as libc::c_int |
             (*block).l[3 as libc::c_int as usize] >>
                 32 as libc::c_int - 24 as libc::c_int) &
            0xff00ff00 as libc::c_uint |
            ((*block).l[3 as libc::c_int as usize] << 8 as libc::c_int |
                 (*block).l[3 as libc::c_int as usize] >>
                     32 as libc::c_int - 8 as libc::c_int) &
                0xff00ff as libc::c_int as libc::c_uint;
    b =
        (b as
             libc::c_uint).wrapping_add((d & (e ^ a) ^
                                             a).wrapping_add((*block).l[3 as
                                                                            libc::c_int
                                                                            as
                                                                            usize]).wrapping_add(0x5a827999
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(c
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    c
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    d = d << 30 as libc::c_int | d >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[4 as libc::c_int as usize] =
        ((*block).l[4 as libc::c_int as usize] << 24 as libc::c_int |
             (*block).l[4 as libc::c_int as usize] >>
                 32 as libc::c_int - 24 as libc::c_int) &
            0xff00ff00 as libc::c_uint |
            ((*block).l[4 as libc::c_int as usize] << 8 as libc::c_int |
                 (*block).l[4 as libc::c_int as usize] >>
                     32 as libc::c_int - 8 as libc::c_int) &
                0xff00ff as libc::c_int as libc::c_uint;
    a =
        (a as
             libc::c_uint).wrapping_add((c & (d ^ e) ^
                                             e).wrapping_add((*block).l[4 as
                                                                            libc::c_int
                                                                            as
                                                                            usize]).wrapping_add(0x5a827999
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(b
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    b
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    c = c << 30 as libc::c_int | c >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[5 as libc::c_int as usize] =
        ((*block).l[5 as libc::c_int as usize] << 24 as libc::c_int |
             (*block).l[5 as libc::c_int as usize] >>
                 32 as libc::c_int - 24 as libc::c_int) &
            0xff00ff00 as libc::c_uint |
            ((*block).l[5 as libc::c_int as usize] << 8 as libc::c_int |
                 (*block).l[5 as libc::c_int as usize] >>
                     32 as libc::c_int - 8 as libc::c_int) &
                0xff00ff as libc::c_int as libc::c_uint;
    e =
        (e as
             libc::c_uint).wrapping_add((b & (c ^ d) ^
                                             d).wrapping_add((*block).l[5 as
                                                                            libc::c_int
                                                                            as
                                                                            usize]).wrapping_add(0x5a827999
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(a
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    a
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    b = b << 30 as libc::c_int | b >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[6 as libc::c_int as usize] =
        ((*block).l[6 as libc::c_int as usize] << 24 as libc::c_int |
             (*block).l[6 as libc::c_int as usize] >>
                 32 as libc::c_int - 24 as libc::c_int) &
            0xff00ff00 as libc::c_uint |
            ((*block).l[6 as libc::c_int as usize] << 8 as libc::c_int |
                 (*block).l[6 as libc::c_int as usize] >>
                     32 as libc::c_int - 8 as libc::c_int) &
                0xff00ff as libc::c_int as libc::c_uint;
    d =
        (d as
             libc::c_uint).wrapping_add((a & (b ^ c) ^
                                             c).wrapping_add((*block).l[6 as
                                                                            libc::c_int
                                                                            as
                                                                            usize]).wrapping_add(0x5a827999
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(e
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    e
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    a = a << 30 as libc::c_int | a >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[7 as libc::c_int as usize] =
        ((*block).l[7 as libc::c_int as usize] << 24 as libc::c_int |
             (*block).l[7 as libc::c_int as usize] >>
                 32 as libc::c_int - 24 as libc::c_int) &
            0xff00ff00 as libc::c_uint |
            ((*block).l[7 as libc::c_int as usize] << 8 as libc::c_int |
                 (*block).l[7 as libc::c_int as usize] >>
                     32 as libc::c_int - 8 as libc::c_int) &
                0xff00ff as libc::c_int as libc::c_uint;
    c =
        (c as
             libc::c_uint).wrapping_add((e & (a ^ b) ^
                                             b).wrapping_add((*block).l[7 as
                                                                            libc::c_int
                                                                            as
                                                                            usize]).wrapping_add(0x5a827999
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(d
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    d
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    e = e << 30 as libc::c_int | e >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[8 as libc::c_int as usize] =
        ((*block).l[8 as libc::c_int as usize] << 24 as libc::c_int |
             (*block).l[8 as libc::c_int as usize] >>
                 32 as libc::c_int - 24 as libc::c_int) &
            0xff00ff00 as libc::c_uint |
            ((*block).l[8 as libc::c_int as usize] << 8 as libc::c_int |
                 (*block).l[8 as libc::c_int as usize] >>
                     32 as libc::c_int - 8 as libc::c_int) &
                0xff00ff as libc::c_int as libc::c_uint;
    b =
        (b as
             libc::c_uint).wrapping_add((d & (e ^ a) ^
                                             a).wrapping_add((*block).l[8 as
                                                                            libc::c_int
                                                                            as
                                                                            usize]).wrapping_add(0x5a827999
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(c
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    c
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    d = d << 30 as libc::c_int | d >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[9 as libc::c_int as usize] =
        ((*block).l[9 as libc::c_int as usize] << 24 as libc::c_int |
             (*block).l[9 as libc::c_int as usize] >>
                 32 as libc::c_int - 24 as libc::c_int) &
            0xff00ff00 as libc::c_uint |
            ((*block).l[9 as libc::c_int as usize] << 8 as libc::c_int |
                 (*block).l[9 as libc::c_int as usize] >>
                     32 as libc::c_int - 8 as libc::c_int) &
                0xff00ff as libc::c_int as libc::c_uint;
    a =
        (a as
             libc::c_uint).wrapping_add((c & (d ^ e) ^
                                             e).wrapping_add((*block).l[9 as
                                                                            libc::c_int
                                                                            as
                                                                            usize]).wrapping_add(0x5a827999
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(b
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    b
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    c = c << 30 as libc::c_int | c >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[10 as libc::c_int as usize] =
        ((*block).l[10 as libc::c_int as usize] << 24 as libc::c_int |
             (*block).l[10 as libc::c_int as usize] >>
                 32 as libc::c_int - 24 as libc::c_int) &
            0xff00ff00 as libc::c_uint |
            ((*block).l[10 as libc::c_int as usize] << 8 as libc::c_int |
                 (*block).l[10 as libc::c_int as usize] >>
                     32 as libc::c_int - 8 as libc::c_int) &
                0xff00ff as libc::c_int as libc::c_uint;
    e =
        (e as
             libc::c_uint).wrapping_add((b & (c ^ d) ^
                                             d).wrapping_add((*block).l[10 as
                                                                            libc::c_int
                                                                            as
                                                                            usize]).wrapping_add(0x5a827999
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(a
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    a
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    b = b << 30 as libc::c_int | b >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[11 as libc::c_int as usize] =
        ((*block).l[11 as libc::c_int as usize] << 24 as libc::c_int |
             (*block).l[11 as libc::c_int as usize] >>
                 32 as libc::c_int - 24 as libc::c_int) &
            0xff00ff00 as libc::c_uint |
            ((*block).l[11 as libc::c_int as usize] << 8 as libc::c_int |
                 (*block).l[11 as libc::c_int as usize] >>
                     32 as libc::c_int - 8 as libc::c_int) &
                0xff00ff as libc::c_int as libc::c_uint;
    d =
        (d as
             libc::c_uint).wrapping_add((a & (b ^ c) ^
                                             c).wrapping_add((*block).l[11 as
                                                                            libc::c_int
                                                                            as
                                                                            usize]).wrapping_add(0x5a827999
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(e
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    e
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    a = a << 30 as libc::c_int | a >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[12 as libc::c_int as usize] =
        ((*block).l[12 as libc::c_int as usize] << 24 as libc::c_int |
             (*block).l[12 as libc::c_int as usize] >>
                 32 as libc::c_int - 24 as libc::c_int) &
            0xff00ff00 as libc::c_uint |
            ((*block).l[12 as libc::c_int as usize] << 8 as libc::c_int |
                 (*block).l[12 as libc::c_int as usize] >>
                     32 as libc::c_int - 8 as libc::c_int) &
                0xff00ff as libc::c_int as libc::c_uint;
    c =
        (c as
             libc::c_uint).wrapping_add((e & (a ^ b) ^
                                             b).wrapping_add((*block).l[12 as
                                                                            libc::c_int
                                                                            as
                                                                            usize]).wrapping_add(0x5a827999
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(d
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    d
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    e = e << 30 as libc::c_int | e >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[13 as libc::c_int as usize] =
        ((*block).l[13 as libc::c_int as usize] << 24 as libc::c_int |
             (*block).l[13 as libc::c_int as usize] >>
                 32 as libc::c_int - 24 as libc::c_int) &
            0xff00ff00 as libc::c_uint |
            ((*block).l[13 as libc::c_int as usize] << 8 as libc::c_int |
                 (*block).l[13 as libc::c_int as usize] >>
                     32 as libc::c_int - 8 as libc::c_int) &
                0xff00ff as libc::c_int as libc::c_uint;
    b =
        (b as
             libc::c_uint).wrapping_add((d & (e ^ a) ^
                                             a).wrapping_add((*block).l[13 as
                                                                            libc::c_int
                                                                            as
                                                                            usize]).wrapping_add(0x5a827999
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(c
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    c
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    d = d << 30 as libc::c_int | d >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[14 as libc::c_int as usize] =
        ((*block).l[14 as libc::c_int as usize] << 24 as libc::c_int |
             (*block).l[14 as libc::c_int as usize] >>
                 32 as libc::c_int - 24 as libc::c_int) &
            0xff00ff00 as libc::c_uint |
            ((*block).l[14 as libc::c_int as usize] << 8 as libc::c_int |
                 (*block).l[14 as libc::c_int as usize] >>
                     32 as libc::c_int - 8 as libc::c_int) &
                0xff00ff as libc::c_int as libc::c_uint;
    a =
        (a as
             libc::c_uint).wrapping_add((c & (d ^ e) ^
                                             e).wrapping_add((*block).l[14 as
                                                                            libc::c_int
                                                                            as
                                                                            usize]).wrapping_add(0x5a827999
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(b
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    b
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    c = c << 30 as libc::c_int | c >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[15 as libc::c_int as usize] =
        ((*block).l[15 as libc::c_int as usize] << 24 as libc::c_int |
             (*block).l[15 as libc::c_int as usize] >>
                 32 as libc::c_int - 24 as libc::c_int) &
            0xff00ff00 as libc::c_uint |
            ((*block).l[15 as libc::c_int as usize] << 8 as libc::c_int |
                 (*block).l[15 as libc::c_int as usize] >>
                     32 as libc::c_int - 8 as libc::c_int) &
                0xff00ff as libc::c_int as libc::c_uint;
    e =
        (e as
             libc::c_uint).wrapping_add((b & (c ^ d) ^
                                             d).wrapping_add((*block).l[15 as
                                                                            libc::c_int
                                                                            as
                                                                            usize]).wrapping_add(0x5a827999
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(a
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    a
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    b = b << 30 as libc::c_int | b >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(16 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(16 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(16 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(16 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(16 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(16 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(16 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(16 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(16 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    d =
        (d as
             libc::c_uint).wrapping_add((a & (b ^ c) ^
                                             c).wrapping_add((*block).l[(16 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0x5a827999
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(e
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    e
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    a = a << 30 as libc::c_int | a >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(17 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(17 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(17 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(17 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(17 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(17 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(17 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(17 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(17 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    c =
        (c as
             libc::c_uint).wrapping_add((e & (a ^ b) ^
                                             b).wrapping_add((*block).l[(17 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0x5a827999
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(d
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    d
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    e = e << 30 as libc::c_int | e >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(18 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(18 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(18 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(18 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(18 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(18 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(18 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(18 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(18 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    b =
        (b as
             libc::c_uint).wrapping_add((d & (e ^ a) ^
                                             a).wrapping_add((*block).l[(18 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0x5a827999
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(c
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    c
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    d = d << 30 as libc::c_int | d >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(19 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(19 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(19 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(19 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(19 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(19 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(19 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(19 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(19 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    a =
        (a as
             libc::c_uint).wrapping_add((c & (d ^ e) ^
                                             e).wrapping_add((*block).l[(19 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0x5a827999
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(b
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    b
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    c = c << 30 as libc::c_int | c >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(20 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(20 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(20 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(20 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(20 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(20 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(20 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(20 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(20 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    e =
        (e as
             libc::c_uint).wrapping_add((b ^ c ^
                                             d).wrapping_add((*block).l[(20 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0x6ed9eba1
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(a
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    a
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    b = b << 30 as libc::c_int | b >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(21 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(21 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(21 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(21 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(21 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(21 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(21 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(21 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(21 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    d =
        (d as
             libc::c_uint).wrapping_add((a ^ b ^
                                             c).wrapping_add((*block).l[(21 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0x6ed9eba1
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(e
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    e
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    a = a << 30 as libc::c_int | a >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(22 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(22 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(22 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(22 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(22 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(22 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(22 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(22 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(22 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    c =
        (c as
             libc::c_uint).wrapping_add((e ^ a ^
                                             b).wrapping_add((*block).l[(22 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0x6ed9eba1
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(d
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    d
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    e = e << 30 as libc::c_int | e >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(23 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(23 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(23 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(23 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(23 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(23 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(23 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(23 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(23 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    b =
        (b as
             libc::c_uint).wrapping_add((d ^ e ^
                                             a).wrapping_add((*block).l[(23 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0x6ed9eba1
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(c
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    c
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    d = d << 30 as libc::c_int | d >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(24 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(24 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(24 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(24 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(24 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(24 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(24 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(24 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(24 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    a =
        (a as
             libc::c_uint).wrapping_add((c ^ d ^
                                             e).wrapping_add((*block).l[(24 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0x6ed9eba1
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(b
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    b
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    c = c << 30 as libc::c_int | c >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(25 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(25 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(25 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(25 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(25 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(25 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(25 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(25 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(25 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    e =
        (e as
             libc::c_uint).wrapping_add((b ^ c ^
                                             d).wrapping_add((*block).l[(25 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0x6ed9eba1
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(a
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    a
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    b = b << 30 as libc::c_int | b >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(26 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(26 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(26 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(26 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(26 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(26 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(26 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(26 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(26 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    d =
        (d as
             libc::c_uint).wrapping_add((a ^ b ^
                                             c).wrapping_add((*block).l[(26 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0x6ed9eba1
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(e
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    e
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    a = a << 30 as libc::c_int | a >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(27 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(27 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(27 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(27 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(27 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(27 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(27 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(27 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(27 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    c =
        (c as
             libc::c_uint).wrapping_add((e ^ a ^
                                             b).wrapping_add((*block).l[(27 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0x6ed9eba1
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(d
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    d
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    e = e << 30 as libc::c_int | e >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(28 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(28 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(28 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(28 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(28 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(28 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(28 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(28 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(28 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    b =
        (b as
             libc::c_uint).wrapping_add((d ^ e ^
                                             a).wrapping_add((*block).l[(28 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0x6ed9eba1
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(c
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    c
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    d = d << 30 as libc::c_int | d >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(29 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(29 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(29 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(29 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(29 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(29 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(29 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(29 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(29 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    a =
        (a as
             libc::c_uint).wrapping_add((c ^ d ^
                                             e).wrapping_add((*block).l[(29 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0x6ed9eba1
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(b
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    b
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    c = c << 30 as libc::c_int | c >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(30 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(30 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(30 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(30 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(30 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(30 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(30 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(30 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(30 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    e =
        (e as
             libc::c_uint).wrapping_add((b ^ c ^
                                             d).wrapping_add((*block).l[(30 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0x6ed9eba1
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(a
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    a
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    b = b << 30 as libc::c_int | b >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(31 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(31 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(31 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(31 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(31 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(31 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(31 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(31 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(31 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    d =
        (d as
             libc::c_uint).wrapping_add((a ^ b ^
                                             c).wrapping_add((*block).l[(31 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0x6ed9eba1
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(e
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    e
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    a = a << 30 as libc::c_int | a >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(32 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(32 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(32 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(32 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(32 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(32 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(32 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(32 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(32 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    c =
        (c as
             libc::c_uint).wrapping_add((e ^ a ^
                                             b).wrapping_add((*block).l[(32 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0x6ed9eba1
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(d
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    d
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    e = e << 30 as libc::c_int | e >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(33 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(33 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(33 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(33 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(33 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(33 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(33 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(33 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(33 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    b =
        (b as
             libc::c_uint).wrapping_add((d ^ e ^
                                             a).wrapping_add((*block).l[(33 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0x6ed9eba1
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(c
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    c
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    d = d << 30 as libc::c_int | d >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(34 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(34 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(34 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(34 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(34 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(34 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(34 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(34 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(34 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    a =
        (a as
             libc::c_uint).wrapping_add((c ^ d ^
                                             e).wrapping_add((*block).l[(34 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0x6ed9eba1
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(b
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    b
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    c = c << 30 as libc::c_int | c >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(35 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(35 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(35 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(35 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(35 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(35 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(35 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(35 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(35 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    e =
        (e as
             libc::c_uint).wrapping_add((b ^ c ^
                                             d).wrapping_add((*block).l[(35 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0x6ed9eba1
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(a
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    a
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    b = b << 30 as libc::c_int | b >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(36 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(36 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(36 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(36 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(36 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(36 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(36 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(36 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(36 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    d =
        (d as
             libc::c_uint).wrapping_add((a ^ b ^
                                             c).wrapping_add((*block).l[(36 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0x6ed9eba1
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(e
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    e
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    a = a << 30 as libc::c_int | a >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(37 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(37 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(37 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(37 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(37 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(37 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(37 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(37 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(37 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    c =
        (c as
             libc::c_uint).wrapping_add((e ^ a ^
                                             b).wrapping_add((*block).l[(37 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0x6ed9eba1
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(d
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    d
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    e = e << 30 as libc::c_int | e >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(38 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(38 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(38 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(38 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(38 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(38 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(38 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(38 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(38 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    b =
        (b as
             libc::c_uint).wrapping_add((d ^ e ^
                                             a).wrapping_add((*block).l[(38 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0x6ed9eba1
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(c
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    c
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    d = d << 30 as libc::c_int | d >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(39 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(39 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(39 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(39 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(39 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(39 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(39 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(39 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(39 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    a =
        (a as
             libc::c_uint).wrapping_add((c ^ d ^
                                             e).wrapping_add((*block).l[(39 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0x6ed9eba1
                                                                                                     as
                                                                                                     libc::c_int
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(b
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    b
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    c = c << 30 as libc::c_int | c >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(40 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(40 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(40 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(40 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(40 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(40 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(40 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(40 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(40 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    e =
        (e as
             libc::c_uint).wrapping_add(((b | c) & d |
                                             b &
                                                 c).wrapping_add((*block).l[(40
                                                                                 as
                                                                                 libc::c_int
                                                                                 &
                                                                                 15
                                                                                     as
                                                                                     libc::c_int)
                                                                                as
                                                                                usize]).wrapping_add(0x8f1bbcdc
                                                                                                         as
                                                                                                         libc::c_uint).wrapping_add(a
                                                                                                                                        <<
                                                                                                                                        5
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                        |
                                                                                                                                        a
                                                                                                                                            >>
                                                                                                                                            32
                                                                                                                                                as
                                                                                                                                                libc::c_int
                                                                                                                                                -
                                                                                                                                                5
                                                                                                                                                    as
                                                                                                                                                    libc::c_int))
            as uint32_t as uint32_t;
    b = b << 30 as libc::c_int | b >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(41 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(41 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(41 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(41 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(41 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(41 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(41 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(41 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(41 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    d =
        (d as
             libc::c_uint).wrapping_add(((a | b) & c |
                                             a &
                                                 b).wrapping_add((*block).l[(41
                                                                                 as
                                                                                 libc::c_int
                                                                                 &
                                                                                 15
                                                                                     as
                                                                                     libc::c_int)
                                                                                as
                                                                                usize]).wrapping_add(0x8f1bbcdc
                                                                                                         as
                                                                                                         libc::c_uint).wrapping_add(e
                                                                                                                                        <<
                                                                                                                                        5
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                        |
                                                                                                                                        e
                                                                                                                                            >>
                                                                                                                                            32
                                                                                                                                                as
                                                                                                                                                libc::c_int
                                                                                                                                                -
                                                                                                                                                5
                                                                                                                                                    as
                                                                                                                                                    libc::c_int))
            as uint32_t as uint32_t;
    a = a << 30 as libc::c_int | a >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(42 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(42 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(42 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(42 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(42 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(42 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(42 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(42 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(42 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    c =
        (c as
             libc::c_uint).wrapping_add(((e | a) & b |
                                             e &
                                                 a).wrapping_add((*block).l[(42
                                                                                 as
                                                                                 libc::c_int
                                                                                 &
                                                                                 15
                                                                                     as
                                                                                     libc::c_int)
                                                                                as
                                                                                usize]).wrapping_add(0x8f1bbcdc
                                                                                                         as
                                                                                                         libc::c_uint).wrapping_add(d
                                                                                                                                        <<
                                                                                                                                        5
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                        |
                                                                                                                                        d
                                                                                                                                            >>
                                                                                                                                            32
                                                                                                                                                as
                                                                                                                                                libc::c_int
                                                                                                                                                -
                                                                                                                                                5
                                                                                                                                                    as
                                                                                                                                                    libc::c_int))
            as uint32_t as uint32_t;
    e = e << 30 as libc::c_int | e >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(43 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(43 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(43 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(43 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(43 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(43 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(43 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(43 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(43 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    b =
        (b as
             libc::c_uint).wrapping_add(((d | e) & a |
                                             d &
                                                 e).wrapping_add((*block).l[(43
                                                                                 as
                                                                                 libc::c_int
                                                                                 &
                                                                                 15
                                                                                     as
                                                                                     libc::c_int)
                                                                                as
                                                                                usize]).wrapping_add(0x8f1bbcdc
                                                                                                         as
                                                                                                         libc::c_uint).wrapping_add(c
                                                                                                                                        <<
                                                                                                                                        5
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                        |
                                                                                                                                        c
                                                                                                                                            >>
                                                                                                                                            32
                                                                                                                                                as
                                                                                                                                                libc::c_int
                                                                                                                                                -
                                                                                                                                                5
                                                                                                                                                    as
                                                                                                                                                    libc::c_int))
            as uint32_t as uint32_t;
    d = d << 30 as libc::c_int | d >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(44 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(44 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(44 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(44 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(44 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(44 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(44 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(44 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(44 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    a =
        (a as
             libc::c_uint).wrapping_add(((c | d) & e |
                                             c &
                                                 d).wrapping_add((*block).l[(44
                                                                                 as
                                                                                 libc::c_int
                                                                                 &
                                                                                 15
                                                                                     as
                                                                                     libc::c_int)
                                                                                as
                                                                                usize]).wrapping_add(0x8f1bbcdc
                                                                                                         as
                                                                                                         libc::c_uint).wrapping_add(b
                                                                                                                                        <<
                                                                                                                                        5
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                        |
                                                                                                                                        b
                                                                                                                                            >>
                                                                                                                                            32
                                                                                                                                                as
                                                                                                                                                libc::c_int
                                                                                                                                                -
                                                                                                                                                5
                                                                                                                                                    as
                                                                                                                                                    libc::c_int))
            as uint32_t as uint32_t;
    c = c << 30 as libc::c_int | c >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(45 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(45 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(45 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(45 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(45 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(45 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(45 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(45 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(45 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    e =
        (e as
             libc::c_uint).wrapping_add(((b | c) & d |
                                             b &
                                                 c).wrapping_add((*block).l[(45
                                                                                 as
                                                                                 libc::c_int
                                                                                 &
                                                                                 15
                                                                                     as
                                                                                     libc::c_int)
                                                                                as
                                                                                usize]).wrapping_add(0x8f1bbcdc
                                                                                                         as
                                                                                                         libc::c_uint).wrapping_add(a
                                                                                                                                        <<
                                                                                                                                        5
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                        |
                                                                                                                                        a
                                                                                                                                            >>
                                                                                                                                            32
                                                                                                                                                as
                                                                                                                                                libc::c_int
                                                                                                                                                -
                                                                                                                                                5
                                                                                                                                                    as
                                                                                                                                                    libc::c_int))
            as uint32_t as uint32_t;
    b = b << 30 as libc::c_int | b >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(46 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(46 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(46 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(46 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(46 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(46 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(46 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(46 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(46 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    d =
        (d as
             libc::c_uint).wrapping_add(((a | b) & c |
                                             a &
                                                 b).wrapping_add((*block).l[(46
                                                                                 as
                                                                                 libc::c_int
                                                                                 &
                                                                                 15
                                                                                     as
                                                                                     libc::c_int)
                                                                                as
                                                                                usize]).wrapping_add(0x8f1bbcdc
                                                                                                         as
                                                                                                         libc::c_uint).wrapping_add(e
                                                                                                                                        <<
                                                                                                                                        5
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                        |
                                                                                                                                        e
                                                                                                                                            >>
                                                                                                                                            32
                                                                                                                                                as
                                                                                                                                                libc::c_int
                                                                                                                                                -
                                                                                                                                                5
                                                                                                                                                    as
                                                                                                                                                    libc::c_int))
            as uint32_t as uint32_t;
    a = a << 30 as libc::c_int | a >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(47 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(47 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(47 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(47 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(47 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(47 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(47 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(47 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(47 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    c =
        (c as
             libc::c_uint).wrapping_add(((e | a) & b |
                                             e &
                                                 a).wrapping_add((*block).l[(47
                                                                                 as
                                                                                 libc::c_int
                                                                                 &
                                                                                 15
                                                                                     as
                                                                                     libc::c_int)
                                                                                as
                                                                                usize]).wrapping_add(0x8f1bbcdc
                                                                                                         as
                                                                                                         libc::c_uint).wrapping_add(d
                                                                                                                                        <<
                                                                                                                                        5
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                        |
                                                                                                                                        d
                                                                                                                                            >>
                                                                                                                                            32
                                                                                                                                                as
                                                                                                                                                libc::c_int
                                                                                                                                                -
                                                                                                                                                5
                                                                                                                                                    as
                                                                                                                                                    libc::c_int))
            as uint32_t as uint32_t;
    e = e << 30 as libc::c_int | e >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(48 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(48 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(48 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(48 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(48 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(48 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(48 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(48 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(48 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    b =
        (b as
             libc::c_uint).wrapping_add(((d | e) & a |
                                             d &
                                                 e).wrapping_add((*block).l[(48
                                                                                 as
                                                                                 libc::c_int
                                                                                 &
                                                                                 15
                                                                                     as
                                                                                     libc::c_int)
                                                                                as
                                                                                usize]).wrapping_add(0x8f1bbcdc
                                                                                                         as
                                                                                                         libc::c_uint).wrapping_add(c
                                                                                                                                        <<
                                                                                                                                        5
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                        |
                                                                                                                                        c
                                                                                                                                            >>
                                                                                                                                            32
                                                                                                                                                as
                                                                                                                                                libc::c_int
                                                                                                                                                -
                                                                                                                                                5
                                                                                                                                                    as
                                                                                                                                                    libc::c_int))
            as uint32_t as uint32_t;
    d = d << 30 as libc::c_int | d >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(49 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(49 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(49 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(49 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(49 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(49 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(49 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(49 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(49 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    a =
        (a as
             libc::c_uint).wrapping_add(((c | d) & e |
                                             c &
                                                 d).wrapping_add((*block).l[(49
                                                                                 as
                                                                                 libc::c_int
                                                                                 &
                                                                                 15
                                                                                     as
                                                                                     libc::c_int)
                                                                                as
                                                                                usize]).wrapping_add(0x8f1bbcdc
                                                                                                         as
                                                                                                         libc::c_uint).wrapping_add(b
                                                                                                                                        <<
                                                                                                                                        5
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                        |
                                                                                                                                        b
                                                                                                                                            >>
                                                                                                                                            32
                                                                                                                                                as
                                                                                                                                                libc::c_int
                                                                                                                                                -
                                                                                                                                                5
                                                                                                                                                    as
                                                                                                                                                    libc::c_int))
            as uint32_t as uint32_t;
    c = c << 30 as libc::c_int | c >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(50 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(50 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(50 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(50 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(50 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(50 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(50 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(50 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(50 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    e =
        (e as
             libc::c_uint).wrapping_add(((b | c) & d |
                                             b &
                                                 c).wrapping_add((*block).l[(50
                                                                                 as
                                                                                 libc::c_int
                                                                                 &
                                                                                 15
                                                                                     as
                                                                                     libc::c_int)
                                                                                as
                                                                                usize]).wrapping_add(0x8f1bbcdc
                                                                                                         as
                                                                                                         libc::c_uint).wrapping_add(a
                                                                                                                                        <<
                                                                                                                                        5
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                        |
                                                                                                                                        a
                                                                                                                                            >>
                                                                                                                                            32
                                                                                                                                                as
                                                                                                                                                libc::c_int
                                                                                                                                                -
                                                                                                                                                5
                                                                                                                                                    as
                                                                                                                                                    libc::c_int))
            as uint32_t as uint32_t;
    b = b << 30 as libc::c_int | b >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(51 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(51 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(51 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(51 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(51 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(51 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(51 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(51 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(51 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    d =
        (d as
             libc::c_uint).wrapping_add(((a | b) & c |
                                             a &
                                                 b).wrapping_add((*block).l[(51
                                                                                 as
                                                                                 libc::c_int
                                                                                 &
                                                                                 15
                                                                                     as
                                                                                     libc::c_int)
                                                                                as
                                                                                usize]).wrapping_add(0x8f1bbcdc
                                                                                                         as
                                                                                                         libc::c_uint).wrapping_add(e
                                                                                                                                        <<
                                                                                                                                        5
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                        |
                                                                                                                                        e
                                                                                                                                            >>
                                                                                                                                            32
                                                                                                                                                as
                                                                                                                                                libc::c_int
                                                                                                                                                -
                                                                                                                                                5
                                                                                                                                                    as
                                                                                                                                                    libc::c_int))
            as uint32_t as uint32_t;
    a = a << 30 as libc::c_int | a >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(52 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(52 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(52 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(52 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(52 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(52 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(52 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(52 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(52 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    c =
        (c as
             libc::c_uint).wrapping_add(((e | a) & b |
                                             e &
                                                 a).wrapping_add((*block).l[(52
                                                                                 as
                                                                                 libc::c_int
                                                                                 &
                                                                                 15
                                                                                     as
                                                                                     libc::c_int)
                                                                                as
                                                                                usize]).wrapping_add(0x8f1bbcdc
                                                                                                         as
                                                                                                         libc::c_uint).wrapping_add(d
                                                                                                                                        <<
                                                                                                                                        5
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                        |
                                                                                                                                        d
                                                                                                                                            >>
                                                                                                                                            32
                                                                                                                                                as
                                                                                                                                                libc::c_int
                                                                                                                                                -
                                                                                                                                                5
                                                                                                                                                    as
                                                                                                                                                    libc::c_int))
            as uint32_t as uint32_t;
    e = e << 30 as libc::c_int | e >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(53 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(53 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(53 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(53 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(53 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(53 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(53 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(53 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(53 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    b =
        (b as
             libc::c_uint).wrapping_add(((d | e) & a |
                                             d &
                                                 e).wrapping_add((*block).l[(53
                                                                                 as
                                                                                 libc::c_int
                                                                                 &
                                                                                 15
                                                                                     as
                                                                                     libc::c_int)
                                                                                as
                                                                                usize]).wrapping_add(0x8f1bbcdc
                                                                                                         as
                                                                                                         libc::c_uint).wrapping_add(c
                                                                                                                                        <<
                                                                                                                                        5
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                        |
                                                                                                                                        c
                                                                                                                                            >>
                                                                                                                                            32
                                                                                                                                                as
                                                                                                                                                libc::c_int
                                                                                                                                                -
                                                                                                                                                5
                                                                                                                                                    as
                                                                                                                                                    libc::c_int))
            as uint32_t as uint32_t;
    d = d << 30 as libc::c_int | d >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(54 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(54 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(54 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(54 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(54 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(54 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(54 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(54 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(54 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    a =
        (a as
             libc::c_uint).wrapping_add(((c | d) & e |
                                             c &
                                                 d).wrapping_add((*block).l[(54
                                                                                 as
                                                                                 libc::c_int
                                                                                 &
                                                                                 15
                                                                                     as
                                                                                     libc::c_int)
                                                                                as
                                                                                usize]).wrapping_add(0x8f1bbcdc
                                                                                                         as
                                                                                                         libc::c_uint).wrapping_add(b
                                                                                                                                        <<
                                                                                                                                        5
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                        |
                                                                                                                                        b
                                                                                                                                            >>
                                                                                                                                            32
                                                                                                                                                as
                                                                                                                                                libc::c_int
                                                                                                                                                -
                                                                                                                                                5
                                                                                                                                                    as
                                                                                                                                                    libc::c_int))
            as uint32_t as uint32_t;
    c = c << 30 as libc::c_int | c >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(55 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(55 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(55 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(55 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(55 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(55 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(55 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(55 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(55 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    e =
        (e as
             libc::c_uint).wrapping_add(((b | c) & d |
                                             b &
                                                 c).wrapping_add((*block).l[(55
                                                                                 as
                                                                                 libc::c_int
                                                                                 &
                                                                                 15
                                                                                     as
                                                                                     libc::c_int)
                                                                                as
                                                                                usize]).wrapping_add(0x8f1bbcdc
                                                                                                         as
                                                                                                         libc::c_uint).wrapping_add(a
                                                                                                                                        <<
                                                                                                                                        5
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                        |
                                                                                                                                        a
                                                                                                                                            >>
                                                                                                                                            32
                                                                                                                                                as
                                                                                                                                                libc::c_int
                                                                                                                                                -
                                                                                                                                                5
                                                                                                                                                    as
                                                                                                                                                    libc::c_int))
            as uint32_t as uint32_t;
    b = b << 30 as libc::c_int | b >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(56 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(56 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(56 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(56 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(56 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(56 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(56 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(56 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(56 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    d =
        (d as
             libc::c_uint).wrapping_add(((a | b) & c |
                                             a &
                                                 b).wrapping_add((*block).l[(56
                                                                                 as
                                                                                 libc::c_int
                                                                                 &
                                                                                 15
                                                                                     as
                                                                                     libc::c_int)
                                                                                as
                                                                                usize]).wrapping_add(0x8f1bbcdc
                                                                                                         as
                                                                                                         libc::c_uint).wrapping_add(e
                                                                                                                                        <<
                                                                                                                                        5
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                        |
                                                                                                                                        e
                                                                                                                                            >>
                                                                                                                                            32
                                                                                                                                                as
                                                                                                                                                libc::c_int
                                                                                                                                                -
                                                                                                                                                5
                                                                                                                                                    as
                                                                                                                                                    libc::c_int))
            as uint32_t as uint32_t;
    a = a << 30 as libc::c_int | a >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(57 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(57 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(57 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(57 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(57 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(57 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(57 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(57 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(57 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    c =
        (c as
             libc::c_uint).wrapping_add(((e | a) & b |
                                             e &
                                                 a).wrapping_add((*block).l[(57
                                                                                 as
                                                                                 libc::c_int
                                                                                 &
                                                                                 15
                                                                                     as
                                                                                     libc::c_int)
                                                                                as
                                                                                usize]).wrapping_add(0x8f1bbcdc
                                                                                                         as
                                                                                                         libc::c_uint).wrapping_add(d
                                                                                                                                        <<
                                                                                                                                        5
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                        |
                                                                                                                                        d
                                                                                                                                            >>
                                                                                                                                            32
                                                                                                                                                as
                                                                                                                                                libc::c_int
                                                                                                                                                -
                                                                                                                                                5
                                                                                                                                                    as
                                                                                                                                                    libc::c_int))
            as uint32_t as uint32_t;
    e = e << 30 as libc::c_int | e >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(58 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(58 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(58 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(58 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(58 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(58 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(58 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(58 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(58 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    b =
        (b as
             libc::c_uint).wrapping_add(((d | e) & a |
                                             d &
                                                 e).wrapping_add((*block).l[(58
                                                                                 as
                                                                                 libc::c_int
                                                                                 &
                                                                                 15
                                                                                     as
                                                                                     libc::c_int)
                                                                                as
                                                                                usize]).wrapping_add(0x8f1bbcdc
                                                                                                         as
                                                                                                         libc::c_uint).wrapping_add(c
                                                                                                                                        <<
                                                                                                                                        5
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                        |
                                                                                                                                        c
                                                                                                                                            >>
                                                                                                                                            32
                                                                                                                                                as
                                                                                                                                                libc::c_int
                                                                                                                                                -
                                                                                                                                                5
                                                                                                                                                    as
                                                                                                                                                    libc::c_int))
            as uint32_t as uint32_t;
    d = d << 30 as libc::c_int | d >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(59 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(59 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(59 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(59 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(59 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(59 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(59 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(59 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(59 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    a =
        (a as
             libc::c_uint).wrapping_add(((c | d) & e |
                                             c &
                                                 d).wrapping_add((*block).l[(59
                                                                                 as
                                                                                 libc::c_int
                                                                                 &
                                                                                 15
                                                                                     as
                                                                                     libc::c_int)
                                                                                as
                                                                                usize]).wrapping_add(0x8f1bbcdc
                                                                                                         as
                                                                                                         libc::c_uint).wrapping_add(b
                                                                                                                                        <<
                                                                                                                                        5
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                        |
                                                                                                                                        b
                                                                                                                                            >>
                                                                                                                                            32
                                                                                                                                                as
                                                                                                                                                libc::c_int
                                                                                                                                                -
                                                                                                                                                5
                                                                                                                                                    as
                                                                                                                                                    libc::c_int))
            as uint32_t as uint32_t;
    c = c << 30 as libc::c_int | c >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(60 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(60 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(60 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(60 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(60 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(60 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(60 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(60 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(60 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    e =
        (e as
             libc::c_uint).wrapping_add((b ^ c ^
                                             d).wrapping_add((*block).l[(60 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0xca62c1d6
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(a
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    a
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    b = b << 30 as libc::c_int | b >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(61 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(61 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(61 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(61 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(61 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(61 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(61 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(61 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(61 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    d =
        (d as
             libc::c_uint).wrapping_add((a ^ b ^
                                             c).wrapping_add((*block).l[(61 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0xca62c1d6
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(e
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    e
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    a = a << 30 as libc::c_int | a >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(62 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(62 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(62 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(62 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(62 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(62 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(62 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(62 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(62 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    c =
        (c as
             libc::c_uint).wrapping_add((e ^ a ^
                                             b).wrapping_add((*block).l[(62 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0xca62c1d6
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(d
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    d
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    e = e << 30 as libc::c_int | e >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(63 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(63 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(63 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(63 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(63 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(63 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(63 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(63 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(63 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    b =
        (b as
             libc::c_uint).wrapping_add((d ^ e ^
                                             a).wrapping_add((*block).l[(63 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0xca62c1d6
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(c
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    c
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    d = d << 30 as libc::c_int | d >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(64 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(64 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(64 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(64 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(64 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(64 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(64 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(64 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(64 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    a =
        (a as
             libc::c_uint).wrapping_add((c ^ d ^
                                             e).wrapping_add((*block).l[(64 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0xca62c1d6
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(b
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    b
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    c = c << 30 as libc::c_int | c >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(65 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(65 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(65 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(65 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(65 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(65 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(65 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(65 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(65 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    e =
        (e as
             libc::c_uint).wrapping_add((b ^ c ^
                                             d).wrapping_add((*block).l[(65 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0xca62c1d6
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(a
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    a
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    b = b << 30 as libc::c_int | b >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(66 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(66 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(66 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(66 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(66 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(66 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(66 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(66 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(66 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    d =
        (d as
             libc::c_uint).wrapping_add((a ^ b ^
                                             c).wrapping_add((*block).l[(66 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0xca62c1d6
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(e
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    e
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    a = a << 30 as libc::c_int | a >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(67 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(67 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(67 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(67 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(67 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(67 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(67 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(67 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(67 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    c =
        (c as
             libc::c_uint).wrapping_add((e ^ a ^
                                             b).wrapping_add((*block).l[(67 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0xca62c1d6
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(d
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    d
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    e = e << 30 as libc::c_int | e >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(68 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(68 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(68 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(68 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(68 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(68 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(68 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(68 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(68 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    b =
        (b as
             libc::c_uint).wrapping_add((d ^ e ^
                                             a).wrapping_add((*block).l[(68 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0xca62c1d6
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(c
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    c
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    d = d << 30 as libc::c_int | d >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(69 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(69 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(69 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(69 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(69 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(69 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(69 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(69 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(69 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    a =
        (a as
             libc::c_uint).wrapping_add((c ^ d ^
                                             e).wrapping_add((*block).l[(69 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0xca62c1d6
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(b
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    b
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    c = c << 30 as libc::c_int | c >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(70 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(70 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(70 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(70 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(70 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(70 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(70 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(70 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(70 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    e =
        (e as
             libc::c_uint).wrapping_add((b ^ c ^
                                             d).wrapping_add((*block).l[(70 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0xca62c1d6
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(a
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    a
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    b = b << 30 as libc::c_int | b >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(71 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(71 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(71 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(71 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(71 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(71 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(71 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(71 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(71 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    d =
        (d as
             libc::c_uint).wrapping_add((a ^ b ^
                                             c).wrapping_add((*block).l[(71 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0xca62c1d6
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(e
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    e
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    a = a << 30 as libc::c_int | a >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(72 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(72 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(72 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(72 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(72 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(72 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(72 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(72 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(72 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    c =
        (c as
             libc::c_uint).wrapping_add((e ^ a ^
                                             b).wrapping_add((*block).l[(72 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0xca62c1d6
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(d
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    d
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    e = e << 30 as libc::c_int | e >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(73 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(73 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(73 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(73 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(73 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(73 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(73 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(73 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(73 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    b =
        (b as
             libc::c_uint).wrapping_add((d ^ e ^
                                             a).wrapping_add((*block).l[(73 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0xca62c1d6
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(c
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    c
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    d = d << 30 as libc::c_int | d >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(74 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(74 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(74 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(74 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(74 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(74 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(74 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(74 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(74 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    a =
        (a as
             libc::c_uint).wrapping_add((c ^ d ^
                                             e).wrapping_add((*block).l[(74 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0xca62c1d6
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(b
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    b
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    c = c << 30 as libc::c_int | c >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(75 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(75 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(75 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(75 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(75 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(75 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(75 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(75 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(75 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    e =
        (e as
             libc::c_uint).wrapping_add((b ^ c ^
                                             d).wrapping_add((*block).l[(75 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0xca62c1d6
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(a
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    a
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    b = b << 30 as libc::c_int | b >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(76 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(76 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(76 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(76 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(76 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(76 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(76 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(76 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(76 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    d =
        (d as
             libc::c_uint).wrapping_add((a ^ b ^
                                             c).wrapping_add((*block).l[(76 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0xca62c1d6
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(e
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    e
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    a = a << 30 as libc::c_int | a >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(77 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(77 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(77 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(77 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(77 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(77 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(77 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(77 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(77 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    c =
        (c as
             libc::c_uint).wrapping_add((e ^ a ^
                                             b).wrapping_add((*block).l[(77 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0xca62c1d6
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(d
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    d
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    e = e << 30 as libc::c_int | e >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(78 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(78 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(78 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(78 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(78 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(78 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(78 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(78 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(78 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    b =
        (b as
             libc::c_uint).wrapping_add((d ^ e ^
                                             a).wrapping_add((*block).l[(78 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0xca62c1d6
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(c
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    c
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    d = d << 30 as libc::c_int | d >> 32 as libc::c_int - 30 as libc::c_int;
    (*block).l[(79 as libc::c_int & 15 as libc::c_int) as usize] =
        ((*block).l[(79 as libc::c_int + 13 as libc::c_int &
                         15 as libc::c_int) as usize] ^
             (*block).l[(79 as libc::c_int + 8 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(79 as libc::c_int + 2 as libc::c_int &
                             15 as libc::c_int) as usize] ^
             (*block).l[(79 as libc::c_int & 15 as libc::c_int) as usize]) <<
            1 as libc::c_int |
            ((*block).l[(79 as libc::c_int + 13 as libc::c_int &
                             15 as libc::c_int) as usize] ^
                 (*block).l[(79 as libc::c_int + 8 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(79 as libc::c_int + 2 as libc::c_int &
                                 15 as libc::c_int) as usize] ^
                 (*block).l[(79 as libc::c_int & 15 as libc::c_int) as usize])
                >> 32 as libc::c_int - 1 as libc::c_int;
    a =
        (a as
             libc::c_uint).wrapping_add((c ^ d ^
                                             e).wrapping_add((*block).l[(79 as
                                                                             libc::c_int
                                                                             &
                                                                             15
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            usize]).wrapping_add(0xca62c1d6
                                                                                                     as
                                                                                                     libc::c_uint).wrapping_add(b
                                                                                                                                    <<
                                                                                                                                    5
                                                                                                                                        as
                                                                                                                                        libc::c_int
                                                                                                                                    |
                                                                                                                                    b
                                                                                                                                        >>
                                                                                                                                        32
                                                                                                                                            as
                                                                                                                                            libc::c_int
                                                                                                                                            -
                                                                                                                                            5
                                                                                                                                                as
                                                                                                                                                libc::c_int))
            as uint32_t as uint32_t;
    c = c << 30 as libc::c_int | c >> 32 as libc::c_int - 30 as libc::c_int;
    let ref mut fresh0 = *state.offset(0 as libc::c_int as isize);
    *fresh0 =
        (*fresh0 as libc::c_uint).wrapping_add(a) as uint32_t as uint32_t;
    let ref mut fresh1 = *state.offset(1 as libc::c_int as isize);
    *fresh1 =
        (*fresh1 as libc::c_uint).wrapping_add(b) as uint32_t as uint32_t;
    let ref mut fresh2 = *state.offset(2 as libc::c_int as isize);
    *fresh2 =
        (*fresh2 as libc::c_uint).wrapping_add(c) as uint32_t as uint32_t;
    let ref mut fresh3 = *state.offset(3 as libc::c_int as isize);
    *fresh3 =
        (*fresh3 as libc::c_uint).wrapping_add(d) as uint32_t as uint32_t;
    let ref mut fresh4 = *state.offset(4 as libc::c_int as isize);
    *fresh4 =
        (*fresh4 as libc::c_uint).wrapping_add(e) as uint32_t as uint32_t;
    e = 0 as libc::c_int as uint32_t;
    d = e;
    c = d;
    b = c;
    a = b;
}
/* Add padding and return the message digest. */
unsafe extern "C" fn SHA1_Final(mut context: *mut SHA1_CTX,
                                mut digest: *mut uint8_t) {
    let mut i: uint32_t = 0;
    let mut finalcount: [uint8_t; 8] = [0; 8];
    i = 0 as libc::c_int as uint32_t;
    while i < 8 as libc::c_int as libc::c_uint {
        finalcount[i as usize] =
            ((*context).count[(if i >= 4 as libc::c_int as libc::c_uint {
                                   0 as libc::c_int
                               } else { 1 as libc::c_int }) as usize] >>
                 (3 as libc::c_int as
                      libc::c_uint).wrapping_sub(i &
                                                     3 as libc::c_int as
                                                         libc::c_uint).wrapping_mul(8
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        libc::c_uint)
                 & 255 as libc::c_int as libc::c_uint) as libc::c_uchar;
        i = i.wrapping_add(1)
        /* Endian independent */
    } /* Should cause a SHA1_Transform() */
    SHA1_Update(context,
                b"\x80\x00" as *const u8 as *const libc::c_char as
                    *mut uint8_t, 1 as libc::c_int as size_t);
    while (*context).count[0 as libc::c_int as usize] &
              504 as libc::c_int as libc::c_uint !=
              448 as libc::c_int as libc::c_uint {
        SHA1_Update(context,
                    b"\x00\x00" as *const u8 as *const libc::c_char as
                        *mut uint8_t, 1 as libc::c_int as size_t);
    }
    SHA1_Update(context, finalcount.as_mut_ptr(), 8 as libc::c_int as size_t);
    i = 0 as libc::c_int as uint32_t;
    while i < 20 as libc::c_int as libc::c_uint {
        *digest.offset(i as isize) =
            ((*context).state[(i >> 2 as libc::c_int) as usize] >>
                 (3 as libc::c_int as
                      libc::c_uint).wrapping_sub(i &
                                                     3 as libc::c_int as
                                                         libc::c_uint).wrapping_mul(8
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        libc::c_uint)
                 & 255 as libc::c_int as libc::c_uint) as uint8_t;
        i = i.wrapping_add(1)
    }
    /* Wipe variables */
    i = 0 as libc::c_int as uint32_t; /* SWR */
    memset((*context).buffer.as_mut_ptr() as *mut libc::c_void,
           0 as libc::c_int, 64 as libc::c_int as libc::c_ulong);
    memset((*context).state.as_mut_ptr() as *mut libc::c_void,
           0 as libc::c_int, 20 as libc::c_int as libc::c_ulong);
    memset((*context).count.as_mut_ptr() as *mut libc::c_void,
           0 as libc::c_int, 8 as libc::c_int as libc::c_ulong);
    memset(finalcount.as_mut_ptr() as *mut libc::c_void, 0 as libc::c_int,
           8 as libc::c_int as libc::c_ulong);
    /* make SHA1Transform overwrite its own static vars */
    SHA1_Transform((*context).state.as_mut_ptr(),
                   (*context).buffer.as_mut_ptr() as *const uint8_t);
}
#[inline]
unsafe extern "C" fn sum(mut data: *mut libc::c_void, mut len: libc::c_int)
 -> libc::c_ulong {
    let mut sha: SHA1_CTX =
        SHA1_CTX{state: [0; 5], count: [0; 2], buffer: [0; 64],};
    let mut digest: [uint8_t; 20] = [0; 20];
    SHA1_Init(&mut sha);
    SHA1_Update(&mut sha, data as *const uint8_t, len as size_t);
    SHA1_Final(&mut sha, digest.as_mut_ptr());
    return ((digest[0 as libc::c_int as usize] as libc::c_int) <<
                24 as libc::c_int |
                (digest[1 as libc::c_int as usize] as libc::c_int) <<
                    16 as libc::c_int |
                (digest[2 as libc::c_int as usize] as libc::c_int) <<
                    8 as libc::c_int |
                digest[3 as libc::c_int as usize] as libc::c_int) as
               libc::c_ulong;
}
unsafe fn main_0() -> libc::c_int {
    let mut srct: [libc::c_uchar; 3] =
        [221 as libc::c_int as libc::c_uchar,
         79 as libc::c_int as libc::c_uchar,
         129 as libc::c_int as libc::c_uchar];
    let mut outt: [libc::c_uchar; 3] = [0; 3];
    static mut src: [libc::c_uchar; 50331648] = [0; 50331648];
    static mut output: [libc::c_uchar; 50331648] = [0; 50331648];
    let mut i: libc::c_int = 0;
    let mut j: libc::c_int = 0;
    let mut k: libc::c_int = 0;
    let mut l: libc::c_int = 0 as libc::c_int;
    let mut input_profile: *mut qcms_profile = 0 as *mut qcms_profile;
    let mut output_profile: *mut qcms_profile = 0 as *mut qcms_profile;
    let mut transform: *mut qcms_transform = 0 as *mut qcms_transform;
    input_profile =
        qcms_profile_from_path(b"lcms_test/input.icc\x00" as *const u8 as
                                   *const libc::c_char);
    output_profile =
        qcms_profile_from_path(b"lcms_test/output.icc\x00" as *const u8 as
                                   *const libc::c_char);
    transform =
        qcms_transform_create(input_profile, QCMS_DATA_RGB_8, output_profile,
                              QCMS_DATA_RGB_8, QCMS_INTENT_PERCEPTUAL);
    //transform = qcms_create_transform(output_profile, input_profile);
    i = 0 as libc::c_int;
    while i < 256 as libc::c_int {
        j = 0 as libc::c_int;
        while j < 256 as libc::c_int {
            k = 0 as libc::c_int;
            while k < 256 as libc::c_int {
                let fresh5 = l;
                l = l + 1;
                src[fresh5 as usize] = i as libc::c_uchar;
                let fresh6 = l;
                l = l + 1;
                src[fresh6 as usize] = j as libc::c_uchar;
                let fresh7 = l;
                l = l + 1;
                src[fresh7 as usize] = k as libc::c_uchar;
                k += 1
            }
            j += 1
        }
        i += 1
    }
    qcms_transform_data(transform, srct.as_mut_ptr() as *const libc::c_void,
                        outt.as_mut_ptr() as *mut libc::c_void,
                        1 as libc::c_int as size_t);
    qcms_transform_data(transform, src.as_mut_ptr() as *const libc::c_void,
                        output.as_mut_ptr() as *mut libc::c_void,
                        (256 as libc::c_int * 256 as libc::c_int *
                             256 as libc::c_int) as size_t);
    i = 256 as libc::c_int * 40 as libc::c_int * 3 as libc::c_int;
    while i <
              30 as libc::c_int +
                  256 as libc::c_int * 40 as libc::c_int * 3 as libc::c_int {
        printf(b"(%d %d %d) -> output (%d %d %d)\n\x00" as *const u8 as
                   *const libc::c_char, src[i as usize] as libc::c_int,
               src[(i + 1 as libc::c_int) as usize] as libc::c_int,
               src[(i + 2 as libc::c_int) as usize] as libc::c_int,
               output[i as usize] as libc::c_int,
               output[(i + 1 as libc::c_int) as usize] as libc::c_int,
               output[(i + 2 as libc::c_int) as usize] as libc::c_int);
        i += 3 as libc::c_int
    }
    qcms_transform_release(transform);
    qcms_profile_release(input_profile);
    qcms_profile_release(output_profile);
    if sum(output.as_mut_ptr() as *mut libc::c_void,
           256 as libc::c_int * 256 as libc::c_int * 256 as libc::c_int *
               3 as libc::c_int) !=
           0xca89c51c as libc::c_uint as libc::c_ulong {
        printf(b"DATA CHANGED: %lx\n\x00" as *const u8 as *const libc::c_char,
               sum(output.as_mut_ptr() as *mut libc::c_void,
                   256 as libc::c_int * 256 as libc::c_int *
                       256 as libc::c_int * 3 as libc::c_int));
        abort();
    }
    return 0 as libc::c_int;
}
#[main]
pub fn main() { unsafe { ::std::process::exit(main_0() as i32) } }
